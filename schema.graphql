type Block @entity {
  id: ID!

  number: BigInt @index
  timestamp: Date @index
  parentHash: String
  specVersion: Int

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  hash: String!
  method: String @index
  section: String @index
  args: String
  signer: Account @index #create relation to account
  nonce: BigInt
  timestamp: Date @index
  signature: String
  tip: BigInt
  isSigned: Boolean
  isSuccess: Boolean

  block: Block #create relation to block
  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}

type Event @entity {
  id: ID!

  index: Int!
  section: String! @index
  method: String! @index
  data: String!

  block: Block #create relation to block
  extrinsic: Extrinsic #create relation to extrins
}

type Call @entity {
  id: ID!

  section: String @index
  method: String @index
  args: String
  timestamp: Date @index
  isSuccess: Boolean

  signer: Account #create ration to account
  extrinsic: Extrinsic #create relation to extrinsic
  parentCall: Call #create relation to call
  calls: [Call] @derivedFrom(field: "parentCall")
}

type Account @entity {
  id: ID!
  createdAt: Date!
  nonce: Int @index
  freeBalance: BigInt
  reservedBalance: BigInt
  miscFrozenBalance: BigInt
  feeFrozenBalance: BigInt

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  calls: [Call] @derivedFrom(field: "signer")

  transferIn: [SystemTokenTransfer] @derivedFrom(field: "to")
  transferOut: [SystemTokenTransfer] @derivedFrom(field: "from")
}

type SystemTokenTransfer @entity {
  id: ID!

  from: Account @index
  to: Account @index
  amount: BigInt @index
  timestamp: Date @index
  extrinsic: Extrinsic
}

type UpwardMessage @entity {
  id: ID!
  sequence: Int @index

  payloadType: String @index
  payload: String
  timestamp: Date @index
  block: Block
}

type BridgeMessageEvent @entity {
  id: ID!
  sequence: Int @index

  eventType: String @index
  timestamp: Date @index
  block: Block

  eraEvents: [EraEvent] @derivedFrom(field: "bridgeMessageEvent")
  appchainToNearTransfers: [AppchainToNearTransfer]
    @derivedFrom(field: "bridgeMessageEvent")
}

type LastBridgeMessageEventSequence @entity {
  id: ID!
  sequence: Int @index
}

type EraEvent @entity {
  id: ID!
  sequence: Int @index
  bridgeMessageEvent: BridgeMessageEvent

  eventType: String @index
  eraIndex: Int @index
  timestamp: Date @index
  block: Block
}

type AppchainToNearTransfer @entity {
  id: ID!
  sequence: Int @index
  bridgeMessageEvent: BridgeMessageEvent

  sender: Account @index
  receiver: String @index
  type: String @index
  assetId: Int @index
  amount: BigInt @index
  collection: BigInt @index
  item: BigInt
  fee: BigInt
  timestamp: Date @index
  extrinsic: Extrinsic
}

type NearToAppchainTransfer @entity {
  id: ID!
  sequence: Int @index

  sender: String @index
  receiver: Account @index
  type: String @index
  assetId: Int @index
  amount: BigInt @index
  collection: BigInt @index
  item: BigInt @index
  timestamp: Date @index
  extrinsic: Extrinsic
}
